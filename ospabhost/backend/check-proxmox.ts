import axios from 'axios';
import dotenv from 'dotenv';
import https from 'https';

dotenv.config();

const PROXMOX_API_URL = process.env.PROXMOX_API_URL;
const PROXMOX_TOKEN_ID = process.env.PROXMOX_TOKEN_ID;
const PROXMOX_TOKEN_SECRET = process.env.PROXMOX_TOKEN_SECRET;
const PROXMOX_NODE = process.env.PROXMOX_NODE || 'sv1';

function getProxmoxHeaders(): Record<string, string> {
  return {
    'Authorization': `PVEAPIToken=${PROXMOX_TOKEN_ID}=${PROXMOX_TOKEN_SECRET}`,
    'Content-Type': 'application/json'
  };
}

const httpsAgent = new https.Agent({
  rejectUnauthorized: false,
  keepAlive: true
});

async function checkProxmox() {
  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Proxmox...\n');
    console.log('URL:', PROXMOX_API_URL);
    console.log('NODE:', PROXMOX_NODE);
    console.log('TOKEN_ID:', PROXMOX_TOKEN_ID);
    console.log('---');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Proxmox...');
    const versionRes = await axios.get(`${PROXMOX_API_URL}/version`, {
      headers: getProxmoxHeaders(),
      timeout: 10000,
      httpsAgent
    });
    console.log('‚úÖ –í–µ—Ä—Å–∏—è:', versionRes.data?.data?.version);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ storage
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ storage –Ω–∞ —É–∑–ª–µ ' + PROXMOX_NODE + '...');
    const storageRes = await axios.get(
      `${PROXMOX_API_URL}/nodes/${PROXMOX_NODE}/storage`,
      {
        headers: getProxmoxHeaders(),
        timeout: 10000,
        httpsAgent
      }
    );
    
    if (storageRes.data?.data) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ storage:');
      storageRes.data.data.forEach((storage: any) => {
        console.log(`   - ${storage.storage} (type: ${storage.type}, enabled: ${storage.enabled ? '–¥–∞' : '–Ω–µ—Ç'})`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    const containersRes = await axios.get(
      `${PROXMOX_API_URL}/nodes/${PROXMOX_NODE}/lxc`,
      {
        headers: getProxmoxHeaders(),
        timeout: 10000,
        httpsAgent
      }
    );

    if (containersRes.data?.data) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${containersRes.data.data.length}`);
      containersRes.data.data.slice(0, 3).forEach((ct: any) => {
        console.log(`   - VMID ${ct.vmid}: ${ct.name} (${ct.status})`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ VMID
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ VMID...');
    const vmidRes = await axios.get(`${PROXMOX_API_URL}/cluster/nextid`, {
      headers: getProxmoxHeaders(),
      timeout: 10000,
      httpsAgent
    });
    console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π VMID:', vmidRes.data?.data);

    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error: any) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Code:', error.code);
    console.error('Status:', error.response?.status);
    if (error.response?.data?.errors) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data.errors);
    }
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —É–∑–ª–µ');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞ Proxmox —Å–µ—Ä–≤–µ—Ä–µ: pvesm status (—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ storage)');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SSH: ssh -o StrictHostKeyChecking=no root@sv1.ospab.host');
    process.exit(1);
  }
}

checkProxmox();
