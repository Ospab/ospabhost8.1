// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
model Tariff {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float
  description String?
  createdAt   DateTime @default(now())
  servers     Server[]
}

model OperatingSystem {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        String   // linux, windows, etc
  template    String?  // путь к шаблону для контейнера
  createdAt   DateTime @default(now())
  servers     Server[]
}

model Server {
  id          Int      @id @default(autoincrement())
  userId      Int
  tariffId    Int
  osId        Int
  status      String   @default("creating") // creating, running, stopped, suspended, error
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  tariff      Tariff   @relation(fields: [tariffId], references: [id])
  os          OperatingSystem @relation(fields: [osId], references: [id])
  
  // Proxmox данные
  node        String?  
  diskTemplate String? 
  proxmoxId   Int?
  
  // Сетевые настройки
  ipAddress   String?  // Локальный IP адрес
  macAddress  String?  // MAC адрес
  
  // Доступы
  rootPassword String?  // Зашифрованный root пароль
  sshPublicKey String?  // SSH публичный ключ (опционально)
  
  // Мониторинг
  lastPing    DateTime?
  cpuUsage    Float?   @default(0)
  memoryUsage Float?   @default(0)
  diskUsage   Float?   @default(0)
  networkIn   Float?   @default(0)
  networkOut  Float?   @default(0)
  
  // Связи с новыми таблицами
  metrics      ServerMetrics[]
  snapshots    ServerSnapshot[]
  actions      ServerAction[]
  alerts       AlertNotification[]
}

model ServerMetrics {
  id          Int      @id @default(autoincrement())
  serverId    Int
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  cpu         Float
  memory      Float
  disk        Float
  networkIn   Float
  networkOut  Float
  timestamp   DateTime @default(now())
  
  @@index([serverId, timestamp])
}

model ServerSnapshot {
  id          Int      @id @default(autoincrement())
  serverId    Int
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  name        String
  description String?
  snapname    String   // Proxmox snapshot name
  createdAt   DateTime @default(now())
  
  @@index([serverId])
}

model ServerAction {
  id          Int      @id @default(autoincrement())
  serverId    Int
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  action      String   // start, stop, restart, snapshot, delete, etc
  userId      Int
  status      String   @default("pending") // pending, success, failed
  result      String?  @db.Text
  createdAt   DateTime @default(now())
  
  @@index([serverId, createdAt])
}

model AlertRule {
  id          Int      @id @default(autoincrement())
  name        String
  metric      String   // cpu, memory, disk
  threshold   Float
  condition   String   // greater_than, less_than
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  notifications AlertNotification[]
}

model AlertNotification {
  id          Int      @id @default(autoincrement())
  serverId    Int
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  ruleId      Int
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  message     String   @db.Text
  sent        Boolean  @default(false)
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  
  @@index([serverId, sent])
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  plans     Plan[] @relation("UserPlans")
  operator  Int      @default(0)
  tickets   Ticket[] @relation("UserTickets")
  responses Response[] @relation("OperatorResponses")
  checks    Check[]  @relation("UserChecks")
  balance   Float  @default(0)
  servers   Server[]
  notifications Notification[]
}

model Check {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  status    String   @default("pending") // pending, approved, rejected
  fileUrl   String
  createdAt DateTime @default(now())
  user      User     @relation("UserChecks", fields: [userId], references: [id])
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  price       Float
  description String?
  isCustom    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      Int
  owner       User      @relation("UserPlans", fields: [userId], references: [id])
  services    Service[] @relation("PlanServices")
}

model Service {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  price   Float
  planId  Int?
  plan    Plan?   @relation("PlanServices", fields: [planId], references: [id])
}

model Ticket {
  id         Int        @id @default(autoincrement())
  title      String
  message    String
  userId     Int
  status     String     @default("open")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  responses  Response[] @relation("TicketResponses")
  user       User?      @relation("UserTickets", fields: [userId], references: [id])
}

model Response {
  id         Int      @id @default(autoincrement())
  ticketId   Int
  operatorId Int
  message    String
  createdAt  DateTime @default(now())
  ticket     Ticket   @relation("TicketResponses", fields: [ticketId], references: [id])
  operator   User     @relation("OperatorResponses", fields: [operatorId], references: [id])
}
model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  message   String
  createdAt DateTime @default(now())
}