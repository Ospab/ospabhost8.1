// frontend/src/pages/dashboard/mainpage.tsx
import { useState, useEffect } from 'react';
import { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import AuthContext from '../../context/authcontext';
import { useContext } from 'react';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
import Summary from './summary';
import Servers from './servers';
import Tickets from './tickets';
import Billing from './billing';
import Settings from './settings';
import CheckVerification from './checkverification';
import TicketResponse from './ticketresponse';

const Dashboard = () => {
  const [userData, setUserData] = useState<import('./types').UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const location = useLocation();
  const { logout } = useContext(AuthContext);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏–∑ URL
  const getActiveTab = () => {
    const path = location.pathname.split('/dashboard/')[1] || '';
    return path === '' ? 'summary' : path;
  };

  const [activeTab, setActiveTab] = useState(getActiveTab());

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
  useEffect(() => {
    setActiveTab(getActiveTab());
  }, [location]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem('access_token');
        if (!token) {
          console.log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
          logout();
          navigate('/login');
          return;
        }

        const headers = { Authorization: `Bearer ${token}` };
        const userRes = await axios.get('http://localhost:5000/api/auth/me', { headers });
        
        setUserData({
          user: userRes.data.user,
          balance: 1500,
          servers: [],
          tickets: [],
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        if (axios.isAxiosError(err) && err.response?.status === 401) {
          logout();
          navigate('/login');
        }
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [logout, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-ospab-primary mx-auto mb-4"></div>
          <h1 className="text-2xl text-gray-800">–ó–∞–≥—Ä—É–∑–∫–∞...</h1>
        </div>
      </div>
    );
  }

  if (!userData || !userData.user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl text-gray-800 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h1>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-ospab-primary text-white rounded-lg"
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  const isOperator = userData.user.operator === 1;

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Sidebar - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–µ–≤–∞ */}
      <div className="w-64 bg-white shadow-xl flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π–¥–±–∞—Ä–∞ */}
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-800">
            –ü—Ä–∏–≤–µ—Ç, {userData.user.username}!
          </h2>
          {isOperator && (
            <span className="inline-block px-2 py-1 bg-red-100 text-red-800 text-xs font-semibold rounded-full mt-1">
              –û–ø–µ—Ä–∞—Ç–æ—Ä
            </span>
          )}
          <div className="mt-2 text-sm text-gray-600">
            –ë–∞–ª–∞–Ω—Å: <span className="font-semibold text-ospab-primary">‚ÇΩ{userData.balance}</span>
          </div>
        </div>
        
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <nav className="flex-1 p-6">
          <div className="space-y-1">
            <Link 
              to="/dashboard" 
              className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                activeTab === 'summary' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <span className="mr-3">üìä</span>
              –°–≤–æ–¥–∫–∞
            </Link>
            <Link 
              to="/dashboard/servers" 
              className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                activeTab === 'servers' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <span className="mr-3">üñ•Ô∏è</span>
              –°–µ—Ä–≤–µ—Ä—ã
            </Link>
            <Link 
              to="/dashboard/tickets" 
              className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                activeTab === 'tickets' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <span className="mr-3">üé´</span>
              –¢–∏–∫–µ—Ç—ã
            </Link>
            <Link 
              to="/dashboard/billing" 
              className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                activeTab === 'billing' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <span className="mr-3">üí≥</span>
              –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
            </Link>
            <Link 
              to="/dashboard/settings" 
              className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                activeTab === 'settings' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <span className="mr-3">‚öôÔ∏è</span>
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Link>
          </div>
          
          {isOperator && (
            <div className="mt-8 pt-6 border-t border-gray-200">
              <p className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3 px-4">
                –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
              </p>
              <div className="space-y-1">
                <Link 
                  to="/dashboard/checkverification" 
                  className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                    activeTab === 'checkverification' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span className="mr-3">‚úÖ</span>
                  –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤
                </Link>
                <Link 
                  to="/dashboard/ticketresponse" 
                  className={`flex items-center py-3 px-4 rounded-xl font-semibold transition-colors duration-200 ${
                    activeTab === 'ticketresponse' ? 'bg-ospab-primary text-white shadow-lg' : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span className="mr-3">üí¨</span>
                  –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–∫–µ—Ç—ã
                </Link>
              </div>
            </div>
          )}
        </nav>

        {/* –§—É—Ç–µ—Ä —Å–∞–π–¥–±–∞—Ä–∞ */}
        <div className="p-6 border-t border-gray-200">
          <div className="text-xs text-gray-500 text-center">
            <p>&copy; 2024 ospab.host</p>
            <p className="mt-1">–í–µ—Ä—Å–∏—è 1.0.0</p>
          </div>
        </div>
      </div>

      {/* Main Content - –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ */}
      <div className="flex-1 flex flex-col">
        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏/–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-white border-b border-gray-200 px-8 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 capitalize">
                {activeTab === 'summary' ? '–°–≤–æ–¥–∫–∞' : 
                 activeTab === 'servers' ? '–°–µ—Ä–≤–µ—Ä—ã' :
                 activeTab === 'tickets' ? '–¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏' :
                 activeTab === 'billing' ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞' :
                 activeTab === 'settings' ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞' :
                 activeTab === 'checkverification' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤' :
                 activeTab === 'ticketresponse' ? '–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–∫–µ—Ç—ã' :
                 '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}
              </h1>
              <p className="text-sm text-gray-600 mt-1">
                {new Date().toLocaleDateString('ru-RU', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </p>
            </div>
            
            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="flex space-x-3">
              <Link 
                to="/dashboard/billing" 
                className="px-4 py-2 bg-green-100 text-green-800 rounded-lg text-sm font-medium hover:bg-green-200 transition-colors"
              >
                üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å
              </Link>
              <Link 
                to="/dashboard/tickets" 
                className="px-4 py-2 bg-blue-100 text-blue-800 rounded-lg text-sm font-medium hover:bg-blue-200 transition-colors"
              >
                üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞
              </Link>
            </div>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="flex-1 p-8">
          <Routes>
            <Route path="/" element={<Summary userData={userData} />} />
            <Route path="servers" element={<Servers servers={userData.servers} />} />
            <Route path="tickets" element={<Tickets tickets={userData.tickets} />} />
            <Route path="billing" element={<Billing />} />
            <Route path="settings" element={<Settings />} />
            
            {isOperator && (
              <>
                <Route path="checkverification" element={<CheckVerification />} />
                <Route path="ticketresponse" element={<TicketResponse />} />
              </>
            )}
          </Routes>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;